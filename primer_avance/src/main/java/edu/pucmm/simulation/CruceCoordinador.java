package edu.pucmm.simulation;

import edu.pucmm.model.TipoVehiculo;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Logger;
import java.util.concurrent.TimeUnit;

/**
 * Coordinador global que asegura el orden de creaci√≥n de veh√≠culos en todo el cruce.
 * Garantiza que el primer veh√≠culo creado tenga prioridad absoluta sobre cualquier
 * veh√≠culo creado despu√©s, independientemente de la direcci√≥n de entrada.
 */
public class CruceCoordinador {
    
    private static final Logger logger = Logger.getLogger(CruceCoordinador.class.getName());
    
    private final String cruceId;
    private final Semaphore cruceSemaforo;
    private final PriorityBlockingQueue<VehiculoEnOrdenGlobal> colaGlobal;
    private final ConcurrentHashMap<String, VehiculoEnOrdenGlobal> vehiculosRegistrados;
    private final AtomicBoolean cruceOcupado = new AtomicBoolean(false);
    private String vehiculoActualmenteCruzando = null;
    
    public CruceCoordinador(String cruceId) {
        this.cruceId = cruceId;
        this.cruceSemaforo = new Semaphore(1, true); // Solo 1 veh√≠culo puede cruzar a la vez, modo justo
        this.colaGlobal = new PriorityBlockingQueue<>(100, (v1, v2) -> {
            // 1. Veh√≠culos de emergencia siempre tienen prioridad
            if (v1.tipo() == TipoVehiculo.emergencia && v2.tipo() != TipoVehiculo.emergencia) {
                return -1;
            }
            if (v1.tipo() != TipoVehiculo.emergencia && v2.tipo() == TipoVehiculo.emergencia) {
                return 1;
            }
            
            // 2. Entre veh√≠culos del mismo tipo, orden estricto por timestamp de creaci√≥n
            return Long.compare(v1.timestampCreacion(), v2.timestampCreacion());
        });
        this.vehiculosRegistrados = new ConcurrentHashMap<>();
        
        logger.info("‚úÖ CruceCoordinador inicializado para cruce: " + cruceId);
    }
    
    /**
     * Registra un veh√≠culo en el orden global del cruce.
     * 
     * @param vehiculoId ID del veh√≠culo
     * @param timestampCreacion timestamp cuando se cre√≥ el veh√≠culo
     * @param tipo tipo del veh√≠culo
     * @param direccionEntrada direcci√≥n desde la que entra
     */
    public void registrarVehiculo(String vehiculoId, long timestampCreacion, 
                                 TipoVehiculo tipo, CruceManager.DireccionCruce direccionEntrada) {
        
        VehiculoEnOrdenGlobal vehiculo = new VehiculoEnOrdenGlobal(
            vehiculoId, timestampCreacion, tipo, direccionEntrada, System.currentTimeMillis()
        );
        
        vehiculosRegistrados.put(vehiculoId, vehiculo);
        colaGlobal.offer(vehiculo);
        
        logger.info("üìù Veh√≠culo " + vehiculoId + " registrado en orden global " +
                   "(creado en t=" + timestampCreacion + ", tipo=" + tipo + ", desde=" + direccionEntrada + ")");
    }
    
    /**
     * Verifica si un veh√≠culo puede proceder a cruzar seg√∫n el orden global.
     * Durante protocolo de emergencia, los veh√≠culos de la direcci√≥n de emergencia tienen prioridad.
     * 
     * @param vehiculoId ID del veh√≠culo que quiere cruzar
     * @return true si es su turno seg√∫n el orden global
     */
    public boolean puedeProcedeSegunOrdenGlobal(String vehiculoId) {
        // Durante protocolo de emergencia, verificar prioridad especial
        if (hayProtocoloEmergenciaActivo()) {
            VehiculoEnOrdenGlobal vehiculo = vehiculosRegistrados.get(vehiculoId);
            if (vehiculo != null && vehiculo.direccionEntrada() == direccionEmergenciaActiva) {
                // Veh√≠culos de la direcci√≥n de emergencia tienen prioridad
                logger.info("‚úÖ Veh√≠culo " + vehiculoId + " tiene prioridad por protocolo de emergencia");
                return true;
            } else {
                // Veh√≠culos de otras direcciones deben esperar
                logger.info("‚è∏Ô∏è Veh√≠culo " + vehiculoId + " debe esperar - protocolo de emergencia activo");
                return false;
            }
        }
        
        // Operaci√≥n normal: verificar orden de creaci√≥n
        VehiculoEnOrdenGlobal siguienteEnOrden = colaGlobal.peek();
        
        if (siguienteEnOrden == null) {
            return false; // No hay nadie en la cola
        }
        
        boolean esSuTurno = siguienteEnOrden.vehiculoId().equals(vehiculoId);
        
        if (esSuTurno) {
            logger.info("‚úÖ Veh√≠culo " + vehiculoId + " es el siguiente en orden global");
        } else {
            logger.fine("‚è∏Ô∏è Veh√≠culo " + vehiculoId + " debe esperar. Siguiente en orden: " + 
                       siguienteEnOrden.vehiculoId() + " (creado en t=" + siguienteEnOrden.timestampCreacion() + ")");
        }
        
        return esSuTurno;
    }
    
    private boolean protocoloEmergenciaActivo = false;
    private CruceManager.DireccionCruce direccionEmergenciaActiva = null;
    
    /**
     * Activa el protocolo de emergencia para una direcci√≥n espec√≠fica.
     * @param direccion direcci√≥n donde est√° la emergencia
     */
    public void activarProtocoloEmergencia(CruceManager.DireccionCruce direccion) {
        this.protocoloEmergenciaActivo = true;
        this.direccionEmergenciaActiva = direccion;
        logger.warning("üö® Protocolo de emergencia activado en coordinador para direcci√≥n: " + direccion);
    }
    
    /**
     * Desactiva el protocolo de emergencia.
     */
    public void desactivarProtocoloEmergencia() {
        this.protocoloEmergenciaActivo = false;
        this.direccionEmergenciaActiva = null;
        
        // CRITICAL: Cleanup any inconsistent state after emergency protocol
        limpiarEstadoPostEmergencia();
        
        logger.warning("üö® Protocolo de emergencia desactivado en coordinador");
    }
    
    /**
     * Limpia cualquier estado inconsistente despu√©s del protocolo de emergencia.
     * Esto asegura que la cola global est√© en un estado v√°lido para reanudar operaciones normales.
     */
    private void limpiarEstadoPostEmergencia() {
        logger.info("üßπ Limpiando estado post-emergencia...");
        
        // Verificar si hay un sem√°foro bloqueado sin veh√≠culo activo
        if (cruceOcupado.get() && vehiculoActualmenteCruzando == null) {
            logger.warning("‚ö†Ô∏è Sem√°foro bloqueado sin veh√≠culo activo - liberando");
            cruceOcupado.set(false);
            if (cruceSemaforo.availablePermits() == 0) {
                cruceSemaforo.release();
            }
        }
        
        // Verificar si el veh√≠culo "actualmente cruzando" ya no est√° registrado
        if (vehiculoActualmenteCruzando != null && !vehiculosRegistrados.containsKey(vehiculoActualmenteCruzando)) {
            logger.warning("‚ö†Ô∏è Veh√≠culo cruzando " + vehiculoActualmenteCruzando + " no est√° registrado - limpiando estado");
            vehiculoActualmenteCruzando = null;
            cruceOcupado.set(false);
            if (cruceSemaforo.availablePermits() == 0) {
                cruceSemaforo.release();
            }
        }
        
        // Revisar la cola global y remover cualquier veh√≠culo que ya no est√© registrado
        boolean colaModificada = false;
        while (!colaGlobal.isEmpty()) {
            VehiculoEnOrdenGlobal siguiente = colaGlobal.peek();
            if (siguiente != null && !vehiculosRegistrados.containsKey(siguiente.vehiculoId())) {
                logger.warning("‚ö†Ô∏è Removiendo veh√≠culo inactivo de cola global: " + siguiente.vehiculoId());
                colaGlobal.poll();
                colaModificada = true;
            } else {
                break; // El pr√≥ximo veh√≠culo est√° activo, mantener cola
            }
        }
        
        if (colaModificada) {
            VehiculoEnOrdenGlobal siguiente = colaGlobal.peek();
            if (siguiente != null) {
                logger.info("üìã Nuevo siguiente en orden global despu√©s de limpieza: " + siguiente.vehiculoId());
            } else {
                logger.info("üìã Cola global vac√≠a despu√©s de limpieza");
            }
        }
        
        logger.info("‚úÖ Limpieza post-emergencia completada");
    }
    
    /**
     * Verifica si hay un protocolo de emergencia activo.
     * @return true si hay protocolo de emergencia activo
     */
    public boolean hayProtocoloEmergenciaActivo() {
        return protocoloEmergenciaActivo;
    }
    
    /**
     * Solicita permiso para cruzar el cruce completo.
     * Solo el veh√≠culo con el timestamp de creaci√≥n m√°s antiguo puede proceder.
     * 
     * @param vehiculoId ID del veh√≠culo
     * @param tipo tipo del veh√≠culo
     * @throws InterruptedException si el hilo es interrumpido
     */
    public void solicitarCruceGlobal(String vehiculoId, TipoVehiculo tipo) throws InterruptedException {
        logger.info("üö¶ Veh√≠culo " + vehiculoId + " solicita cruce en orden global");
        
        // Durante protocolo de emergencia, verificar si es de la direcci√≥n de emergencia
        if (hayProtocoloEmergenciaActivo()) {
            VehiculoEnOrdenGlobal vehiculo = vehiculosRegistrados.get(vehiculoId);
            if (vehiculo != null && vehiculo.direccionEntrada() == direccionEmergenciaActiva) {
                logger.info("üö® Veh√≠culo " + vehiculoId + " procede con prioridad de emergencia");
                // Durante emergencia, los veh√≠culos de la direcci√≥n de emergencia tienen prioridad inmediata
            } else {
                logger.info("‚è∏Ô∏è Veh√≠culo " + vehiculoId + " debe esperar - protocolo de emergencia activo");
                return; // No es de la direcci√≥n de emergencia, debe esperar
            }
        } else {
        // Verificar si es su turno en el orden global
        if (!puedeProcedeSegunOrdenGlobal(vehiculoId)) {
            logger.info("‚è∏Ô∏è Veh√≠culo " + vehiculoId + " debe esperar su turno en orden global");
            return; // No es su turno, debe esperar
            }
        }
        
        try {
            // Adquirir el sem√°foro del cruce con un timeout para evitar bloqueos indefinidos
            boolean acquired = cruceSemaforo.tryAcquire(500, TimeUnit.MILLISECONDS);
            
            if (!acquired) {
                logger.info("‚è≥ Veh√≠culo " + vehiculoId + " esperando por sem√°foro global");
                cruceSemaforo.acquire(); // Esperar indefinidamente si no se pudo adquirir en el timeout
            }
            
            // Para emergencias, no verificar de nuevo el orden ya que tienen prioridad absoluta
            if (!hayProtocoloEmergenciaActivo()) {
            // Verificar nuevamente que sigue siendo su turno (por si cambi√≥ mientras esperaba)
            if (!puedeProcedeSegunOrdenGlobal(vehiculoId)) {
                logger.warning("‚ö†Ô∏è Veh√≠culo " + vehiculoId + " perdi√≥ su turno mientras esperaba");
                cruceSemaforo.release(); // Liberar el sem√°foro ya que no es su turno
                return;
                }
            }
            
            // Remover de la cola global ya que va a cruzar
            VehiculoEnOrdenGlobal vehiculo = colaGlobal.poll();
            if (vehiculo != null && vehiculo.vehiculoId().equals(vehiculoId)) {
                cruceOcupado.set(true);
                vehiculoActualmenteCruzando = vehiculoId;
                
                String tipoMensaje = hayProtocoloEmergenciaActivo() ? "con prioridad de emergencia" : "(orden de creaci√≥n respetado)";
                logger.info("‚úÖ Veh√≠culo " + vehiculoId + " obtuvo permiso de cruce global " + tipoMensaje);
            } else {
                logger.warning("‚ö†Ô∏è Error en orden global para veh√≠culo " + vehiculoId);
                cruceSemaforo.release(); // Liberar el sem√°foro en caso de error
            }
            
        } catch (Exception e) {
            logger.warning("Error en solicitud de cruce global para " + vehiculoId + ": " + e.getMessage());
            cruceSemaforo.release(); // Liberar en caso de error
            throw e;
        }
        // NO liberar el sem√°foro aqu√≠ - se liberar√° cuando termine de cruzar
    }
    

    /**
     * Otorga permiso inmediato a un veh√≠culo de emergencia ignorando el orden global.
     */
    public void solicitarCruceEmergencia(String vehiculoId) throws InterruptedException {
        logger.info("üö® Permiso de cruce de emergencia para " + vehiculoId);

        try {
            boolean acquired = cruceSemaforo.tryAcquire(500, TimeUnit.MILLISECONDS);
            if (!acquired) {
                cruceSemaforo.acquire();
            }

            VehiculoEnOrdenGlobal vehiculo = vehiculosRegistrados.remove(vehiculoId);
            if (vehiculo != null) {
                colaGlobal.remove(vehiculo);
            }

            cruceOcupado.set(true);
            vehiculoActualmenteCruzando = vehiculoId;
        } catch (Exception e) {
            logger.warning("Error otorgando cruce de emergencia para " + vehiculoId + ": " + e.getMessage());
            cruceSemaforo.release();
            throw e;
        }
    }

    /**
     * Libera el permiso de cruce global cuando el veh√≠culo termina de cruzar.
     * 
     * @param vehiculoId ID del veh√≠culo que termina de cruzar
     */
    public void liberarCruceGlobal(String vehiculoId) {
        if (!vehiculoId.equals(vehiculoActualmenteCruzando)) {
            logger.warning("‚ö†Ô∏è Veh√≠culo " + vehiculoId + " intenta liberar cruce pero no es el que est√° cruzando");
            return;
        }
        
        try {
            // Guardar info del siguiente antes de eliminar el actual
            VehiculoEnOrdenGlobal siguiente = colaGlobal.peek();
            
            // Eliminar el veh√≠culo del registro
            vehiculosRegistrados.remove(vehiculoId);
            cruceOcupado.set(false);
            vehiculoActualmenteCruzando = null;
            
            // Liberar el sem√°foro para permitir que el siguiente proceda
            if (cruceSemaforo.availablePermits() == 0) {
                cruceSemaforo.release();
                logger.info("üîì Sem√°foro global liberado - disponible para siguiente veh√≠culo");
            }
            
            logger.info("üèÅ Veh√≠culo " + vehiculoId + " liber√≥ cruce global");
            
            // Notificar al siguiente veh√≠culo en la cola
            if (siguiente != null) {
                logger.info("üìã Siguiente en orden global: " + siguiente.vehiculoId() + 
                           " (creado en t=" + siguiente.timestampCreacion() + ")");
                
                // La notificaci√≥n al siguiente ocurrir√° en CruceManager.liberarCruce()
            } else {
                logger.info("üìã No hay m√°s veh√≠culos en espera");
            }
            
        } catch (Exception e) {
            logger.warning("Error al liberar cruce global para " + vehiculoId + ": " + e.getMessage());
        }
    }
    
    /**
     * Remueve completamente un veh√≠culo de todo el estado del coordinador.
     * Se usa cuando un veh√≠culo es eliminado de la simulaci√≥n.
     * 
     * @param vehiculoId ID del veh√≠culo a remover
     */
    public void removerVehiculoCompletamente(String vehiculoId) {
        logger.info("üóëÔ∏è Removiendo veh√≠culo " + vehiculoId + " completamente del coordinador");
        
        // Remover de vehiculosRegistrados
        VehiculoEnOrdenGlobal vehiculoRemovido = vehiculosRegistrados.remove(vehiculoId);
        
        // Remover de la cola global
        if (vehiculoRemovido != null) {
            boolean removidoDeCola = colaGlobal.remove(vehiculoRemovido);
            if (removidoDeCola) {
                logger.info("üìã Veh√≠culo " + vehiculoId + " removido de cola global");
            }
        }
        
        // Si este veh√≠culo estaba cruzando actualmente, limpiar el estado
        if (vehiculoId.equals(vehiculoActualmenteCruzando)) {
            logger.warning("‚ö†Ô∏è Veh√≠culo eliminado " + vehiculoId + " estaba cruzando - liberando estado");
            vehiculoActualmenteCruzando = null;
            cruceOcupado.set(false);
            
            // Liberar sem√°foro si estaba bloqueado
            if (cruceSemaforo.availablePermits() == 0) {
                cruceSemaforo.release();
                logger.info("üîì Sem√°foro liberado por eliminaci√≥n de veh√≠culo");
            }
            
            // NUEVO: Limpieza adicional para evitar inconsistencias
            limpiarEstadoPostEmergencia();
        }
        
        // Log del estado actual para debugging
        VehiculoEnOrdenGlobal siguiente = colaGlobal.peek();
        if (siguiente != null) {
            logger.info("üìã Siguiente en orden global: " + siguiente.vehiculoId());
        } else {
            logger.info("üìã Cola global ahora vac√≠a");
        }
    }
    
    /**
     * Verifica si el cruce est√° actualmente ocupado.
     */
    public boolean estaCruceOcupado() {
        return cruceOcupado.get();
    }
    
    /**
     * Obtiene el ID del veh√≠culo que est√° cruzando actualmente.
     */
    public String getVehiculoCruzandoActualmente() {
        return vehiculoActualmenteCruzando;
    }
    
    /**
     * Obtiene el n√∫mero de veh√≠culos esperando en la cola global.
     */
    public int getVehiculosEnColaGlobal() {
        return colaGlobal.size();
    }
    
    /**
     * Obtiene informaci√≥n del siguiente veh√≠culo en orden.
     */
    public VehiculoEnOrdenGlobal getSiguienteEnOrden() {
        return colaGlobal.peek();
    }
    
    /**
     * Record para representar un veh√≠culo en el orden global.
     */
    public record VehiculoEnOrdenGlobal(
        String vehiculoId,
        long timestampCreacion,
        TipoVehiculo tipo,
        CruceManager.DireccionCruce direccionEntrada,
        long timestampRegistro
    ) {}
} 