package edu.pucmm.simulation;

import edu.pucmm.model.TipoVehiculo;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

/**
 * Manager para el cruce completo de calles (Escenario 1).
 * Agrupa 4 intersecciones individuales para formar un cruce en cruz.
 * 
 * Distribuci√≥n de intersecciones:
 *     Norte
 *       |
 * Oeste-+-Este
 *       |
 *     Sur
 */
public class CruceManager {
    
    private static final Logger logger = Logger.getLogger(CruceManager.class.getName());
    
    private final String id;
    final Map<DireccionCruce, InterseccionManager> intersecciones;
    private final Map<DireccionCruce, CalleQueue> colasPorCalle;
    private final ColisionDetector colisionDetector;
    private final CruceCoordinador coordinadorGlobal;
    
    /**
     * Direcciones de entrada al cruce.
     */
    public enum DireccionCruce {
        // Coordenadas de las se√±ales de stop usadas en la vista (main.fxml)
        // Estas posiciones se usan para que los veh√≠culos se detengan justo
        // donde se muestran las se√±ales en pantalla.
        NORTE(330, 235),    // Stop ubicado al lado norte del cruce
        SUR(470, 355),      // Stop ubicado al lado sur del cruce
        ESTE(460, 230),     // Stop ubicado al lado este del cruce
        OESTE(340, 360);    // Stop ubicado al lado oeste del cruce


        public final double posX, posY;
        
        DireccionCruce(double posX, double posY) {
            this.posX = posX;
            this.posY = posY;
        }
    }
    
    public CruceManager(String id) {
        this.id = id;
        this.intersecciones = new ConcurrentHashMap<>();
        this.colasPorCalle = new ConcurrentHashMap<>();
        this.colisionDetector = new ColisionDetector();
        this.coordinadorGlobal = new CruceCoordinador(id);
        
        // crear las 4 intersecciones del cruce
        inicializarIntersecciones();
        
        logger.info("‚úÖ CruceManager " + id + " inicializado con 4 intersecciones y coordinador global");
    }
    
    /**
     * Inicializa las 4 intersecciones del cruce.
     */
    private void inicializarIntersecciones() {
        for (DireccionCruce direccion : DireccionCruce.values()) {
            String interseccionId = id + "-" + direccion.name().toLowerCase();
            InterseccionManager interseccion = new InterseccionManager(interseccionId);
            intersecciones.put(direccion, interseccion);
            
            // crear cola para esta calle
            String calleId = "calle-" + direccion.name().toLowerCase();
            CalleQueue cola = new CalleQueue(calleId, direccion);
            colasPorCalle.put(direccion, cola);
        }
    }
    
    /**
     * Agrega un veh√≠culo a la cola de la calle correspondiente.
     * Tambi√©n lo registra en el coordinador global para respetar orden de creaci√≥n.
     * 
     * @param vehiculoId ID del veh√≠culo
     * @param timestampCreacion timestamp de cuando se cre√≥ el veh√≠culo
     * @param direccion direcci√≥n desde la que se aproxima
     * @return posici√≥n en la cola
     */
    public int agregarVehiculoACola(String vehiculoId, long timestampCreacion, DireccionCruce direccion) {
        CalleQueue cola = colasPorCalle.get(direccion);
        if (cola == null) {
            throw new IllegalArgumentException("direcci√≥n inv√°lida: " + direccion);
        }
        
        // Registrar en el coordinador global para orden de creaci√≥n
        coordinadorGlobal.registrarVehiculo(vehiculoId, timestampCreacion, TipoVehiculo.normal, direccion);
        
        return cola.agregarVehiculo(vehiculoId, timestampCreacion);
    }
    
    /**
     * Agrega un veh√≠culo de emergencia con prioridad absoluta.
     * Tambi√©n lo registra en el coordinador global con prioridad de emergencia.
     * 
     * @param vehiculoId ID del veh√≠culo de emergencia
     * @param timestampCreacion timestamp de cuando se cre√≥ el veh√≠culo
     * @param direccion direcci√≥n desde la que se aproxima
     */
    public void agregarVehiculoEmergenciaACola(String vehiculoId, long timestampCreacion, DireccionCruce direccion) {
        CalleQueue cola = colasPorCalle.get(direccion);
        if (cola == null) {
            throw new IllegalArgumentException("direcci√≥n inv√°lida: " + direccion);
        }
        
        // Registrar en el coordinador global con prioridad de emergencia
        coordinadorGlobal.registrarVehiculo(vehiculoId, timestampCreacion, TipoVehiculo.emergencia, direccion);
        
        cola.procesarVehiculoEmergencia(vehiculoId, timestampCreacion);
    }
    
    /**
     * Sobrecarga para compatibilidad con c√≥digo existente.
     */
    public int agregarVehiculoACola(String vehiculoId, DireccionCruce direccion) {
        CalleQueue cola = colasPorCalle.get(direccion);
        if (cola == null) {
            throw new IllegalArgumentException("direcci√≥n inv√°lida: " + direccion);
        }
        
        return cola.agregarVehiculo(vehiculoId);
    }
    
    /**
     * Obtiene la posici√≥n donde debe esperar un veh√≠culo.
     */
    public double[] obtenerPosicionEspera(String vehiculoId, DireccionCruce direccion) {
        CalleQueue cola = colasPorCalle.get(direccion);
        if (cola == null) {
            return null;
        }
        
        return cola.obtenerPosicionEspera(vehiculoId);
    }
    
    /**
     * Verifica si un veh√≠culo puede solicitar cruce (es el primero en su cola).
     */
    public boolean puedesolicitarCruce(String vehiculoId, DireccionCruce direccion) {
        CalleQueue cola = colasPorCalle.get(direccion);
        return cola != null && cola.esPrimero(vehiculoId);
    }
    
    /**
     * Solicita cruzar el cruce desde una direcci√≥n espec√≠fica.
     * Ahora usa el coordinador global para respetar orden de creaci√≥n.
     * 
     * @param vehiculoId ID del veh√≠culo
     * @param tipo tipo del veh√≠culo  
     * @param direccionEntrada direcci√≥n desde la que entra el veh√≠culo
     * @throws InterruptedException si el hilo es interrumpido
     */
    public void solicitarCruce(String vehiculoId, TipoVehiculo tipo, 
                              DireccionCruce direccionEntrada) throws InterruptedException {
        
        InterseccionManager interseccion = intersecciones.get(direccionEntrada);
        CalleQueue cola = colasPorCalle.get(direccionEntrada);
        
        if (interseccion == null || cola == null) {
            throw new IllegalArgumentException("direcci√≥n de entrada inv√°lida: " + direccionEntrada);
        }
        
        // 1. Verificar que es el primero en su cola local
        if (!cola.esPrimero(vehiculoId)) {
            logger.warning("veh√≠culo " + vehiculoId + " no es el primero en la cola de " + 
                         direccionEntrada + ", no puede cruzar a√∫n");
            return;
        }
        
        // 2. NUEVO: Verificar orden global de creaci√≥n
        if (!coordinadorGlobal.puedeProcedeSegunOrdenGlobal(vehiculoId)) {
            logger.info("‚è∏Ô∏è veh√≠culo " + vehiculoId + " debe esperar su turno seg√∫n orden global de creaci√≥n");
            return;
        }
        
        logger.info("üö¶ veh√≠culo " + vehiculoId + " solicita cruzar desde " + direccionEntrada + 
                   " en cruce " + id + " (orden global respetado)");
        
        // 3. Solicitar permiso al coordinador global
        coordinadorGlobal.solicitarCruceGlobal(vehiculoId, tipo);
        
        // 4. Si lleg√≥ aqu√≠, tiene permiso global, proceder con intersecci√≥n local
        interseccion.solicitarCruce(vehiculoId, tipo);
        
        // 5. Remover de la cola local despu√©s de obtener permisos
        cola.removerVehiculo(vehiculoId);
    }
    
    /**
     * Determina autom√°ticamente la intersecci√≥n m√°s cercana para un veh√≠culo.
     */
    public DireccionCruce determinarInterseccionMasCercana(double vehiculoPosX, double vehiculoPosY) {
        DireccionCruce masCercana = DireccionCruce.NORTE;
        double menorDistancia = Double.MAX_VALUE;
        
        for (DireccionCruce direccion : DireccionCruce.values()) {
            double distancia = Math.sqrt(
                Math.pow(vehiculoPosX - direccion.posX, 2) + 
                Math.pow(vehiculoPosY - direccion.posY, 2)
            );
            
            if (distancia < menorDistancia) {
                menorDistancia = distancia;
                masCercana = direccion;
            }
        }
        
        return masCercana;
    }
    
    /**
     * Verifica si alguna intersecci√≥n tiene veh√≠culos esperando.
     */
    public boolean tieneVehiculosEsperando() {
        return intersecciones.values().stream()
                .anyMatch(interseccion -> interseccion.getVehiculosEnEspera() > 0);
    }
    
    /**
     * Obtiene el total de veh√≠culos procesados en todo el cruce.
     */
    public int getTotalVehiculosProcessed() {
        return intersecciones.values().stream()
                .mapToInt(InterseccionManager::getVehiculosProcessed)
                .sum();
    }
    
    /**
     * Obtiene informaci√≥n del estado del cruce completo.
     */
    public EstadoCruce getEstadoCruce() {
        Map<DireccionCruce, InterseccionManager.EstadoInterseccion> estadosIntersecciones = 
            new ConcurrentHashMap<>();
        
        for (Map.Entry<DireccionCruce, InterseccionManager> entry : intersecciones.entrySet()) {
            estadosIntersecciones.put(entry.getKey(), entry.getValue().getEstado());
        }
        
        return new EstadoCruce(
            id,
            estadosIntersecciones,
            getTotalVehiculosProcessed(),
            tieneVehiculosEsperando()
        );
    }
    
    /**
     * Obtiene la intersecci√≥n menos congestionada.
     */
    public DireccionCruce getInterseccionMenosCongestionada() {
        return intersecciones.entrySet().stream()
                .min((e1, e2) -> Integer.compare(
                    e1.getValue().getVehiculosEnEspera(),
                    e2.getValue().getVehiculosEnEspera()
                ))
                .map(Map.Entry::getKey)
                .orElse(DireccionCruce.NORTE);
    }
    
    public String getId() {
        return id;
    }
    
    /**
     * Obtiene el coordinador global del cruce.
     * @return coordinador global
     */
    public CruceCoordinador getCoordinadorGlobal() {
        return coordinadorGlobal;
    }
    
    /**
     * Record para representar el estado completo del cruce.
     */
    public record EstadoCruce(
        String id,
        Map<DireccionCruce, InterseccionManager.EstadoInterseccion> intersecciones,
        int totalVehiculosProcessed,
        boolean tieneVehiculosEsperando
    ) {}

    public InterseccionManager getInterseccionManager(CruceManager.DireccionCruce direccion) {
        return intersecciones.get(direccion);
    }

    /**
     * Libera el cruce cuando un veh√≠culo termina de cruzar.
     * Notifica al siguiente veh√≠culo en orden que puede intentar cruzar.
     * 
     * @param vehiculoId ID del veh√≠culo que termina
     * @param direccionEntrada direcci√≥n desde la que entr√≥ el veh√≠culo
     */
    public void liberarCruce(String vehiculoId, DireccionCruce direccionEntrada) {
        InterseccionManager interseccion = intersecciones.get(direccionEntrada);
        
        if (interseccion != null) {
            // Liberar intersecci√≥n local
            interseccion.liberarCruce(vehiculoId);
            
            // Liberar coordinador global
            coordinadorGlobal.liberarCruceGlobal(vehiculoId);
            
            logger.info("üèÅ veh√≠culo " + vehiculoId + " liber√≥ cruce desde " + direccionEntrada + " (global y local)");
            
            // Log del siguiente veh√≠culo en la cola global para debugging
            var siguienteVehiculo = coordinadorGlobal.getSiguienteEnOrden();
            if (siguienteVehiculo != null) {
                logger.info("üö¶ Siguiente veh√≠culo en orden global: " + siguienteVehiculo.vehiculoId() + 
                           " (creado en t=" + siguienteVehiculo.timestampCreacion() + 
                           ", desde=" + siguienteVehiculo.direccionEntrada() + ")");
                
                // IMPORTANTE: Notificar a TODAS las direcciones
                // Esto es crucial ya que cualquier direcci√≥n puede tener el siguiente veh√≠culo
                logger.info("üì¢ Notificando a TODAS las direcciones sobre cambio de estado");
                
                // Primero notificar a la direcci√≥n del siguiente veh√≠culo para priorizar
                DireccionCruce direccionSiguiente = siguienteVehiculo.direccionEntrada();
                InterseccionManager interseccionSiguiente = intersecciones.get(direccionSiguiente);
                if (interseccionSiguiente != null) {
                    logger.info("üì£ Notificando prioritariamente a veh√≠culos en " + direccionSiguiente);
                    interseccionSiguiente.notificarVehiculosEsperando();
                    
                    // Peque√±a pausa para permitir que el siguiente veh√≠culo reaccione primero
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
                
                // Luego notificar al resto de direcciones
                for (DireccionCruce direccion : DireccionCruce.values()) {
                    if (direccion != direccionSiguiente) {  // No notificar nuevamente a la direcci√≥n prioritaria
                        InterseccionManager interseccionDir = intersecciones.get(direccion);
                        if (interseccionDir != null) {
                            logger.info("üì£ Notificando a veh√≠culos en " + direccion);
                            interseccionDir.notificarVehiculosEsperando();
                        }
                    }
                }
            } else {
                logger.info("üö¶ No hay m√°s veh√≠culos esperando en el cruce");
            }
        }
    }
} 