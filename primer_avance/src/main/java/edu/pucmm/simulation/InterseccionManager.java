package edu.pucmm.simulation;

import edu.pucmm.model.TipoVehiculo;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Logger;
import java.util.concurrent.TimeUnit;

/**
 * Manager para una intersecci√≥n individual con control FIFO y prioridad de emergencia.
 */
public class InterseccionManager {
    
    private static final Logger logger = Logger.getLogger(InterseccionManager.class.getName());
    
    private final String id;
    private final Semaphore cruce;
    private final PriorityBlockingQueue<VehiculoWaiting> colaEspera;
    private final AtomicInteger vehiculosProcessed = new AtomicInteger(0);
    // LA SIGUIENTE COLA ES REDUNDANTE Y CAUSA BUGS. SER√Å ELIMINADA.
    // private final Queue<String> vehiculosEnEspera = new ConcurrentLinkedQueue<>();
    
    // tiempos de cruce en milisegundos
    private static final long TIEMPO_CRUCE_NORMAL = 800;
    private static final long TIEMPO_CRUCE_EMERGENCIA = 400;
    
    public InterseccionManager(String id) {
        this.id = id;
        this.cruce = new Semaphore(1, true); // solo 1 veh√≠culo, modo justo (FIFO)
        this.colaEspera = new PriorityBlockingQueue<>(100, (v1, v2) -> {
            // veh√≠culos de emergencia tienen prioridad absoluta
            if (v1.tipo() == TipoVehiculo.emergencia && v2.tipo() != TipoVehiculo.emergencia) {
                return -1;
            }
            if (v1.tipo() != TipoVehiculo.emergencia && v2.tipo() == TipoVehiculo.emergencia) {
                return 1;
            }
            // mismo tipo: orden de llegada (timestamp)
            return Long.compare(v1.timestampLlegada(), v2.timestampLlegada());
        });
    }

    /**
     * Solicita permiso para cruzar la intersecci√≥n.
     * Implementa el patr√≥n acquire/release con manejo de prioridades.
     * Ahora es no-bloqueante para permitir que el veh√≠culo ejecute su movimiento.
     * 
     * @param vehiculoId ID del veh√≠culo que solicita cruzar
     * @param tipo tipo del veh√≠culo (normal o emergencia)
     * @throws InterruptedException si el hilo es interrumpido mientras espera
     */
    public void solicitarCruce(String vehiculoId, TipoVehiculo tipo) throws InterruptedException {
        long timestampLlegada = System.currentTimeMillis();

        logger.info("üöó veh√≠culo " + vehiculoId + " (" + tipo + ") solicita cruzar intersecci√≥n " + id);

        VehiculoWaiting vehiculoWaiting = new VehiculoWaiting(vehiculoId, tipo, timestampLlegada);
        colaEspera.offer(vehiculoWaiting);

        try {
            // Intentar adquirir el sem√°foro con un timeout corto
            boolean acquired = cruce.tryAcquire(300, TimeUnit.MILLISECONDS);
            
            if (!acquired) {
                logger.info("‚è≥ veh√≠culo " + vehiculoId + " esperando por sem√°foro en intersecci√≥n " + id);
                
                // Verificar si hay otro veh√≠culo cruzando actualmente
                if (cruce.availablePermits() == 0) {
                    logger.info("‚è∏Ô∏è veh√≠culo " + vehiculoId + " esperando a que se libere intersecci√≥n " + id);
                }
                
                // Intentar adquirir con un timeout m√°s largo pero no indefinido
                acquired = cruce.tryAcquire(2000, TimeUnit.MILLISECONDS);
                
                if (!acquired) {
                    logger.warning("‚ö†Ô∏è Timeout esperando sem√°foro para " + vehiculoId + " en " + id);
                    colaEspera.remove(vehiculoWaiting); // Remover de la cola para evitar bloqueos
                    return; // No bloquear indefinidamente
                }
            }
            
            // Verificar que este veh√≠culo es el que debe proceder seg√∫n la cola
            VehiculoWaiting proximo = colaEspera.peek();
            int intentos = 0;
            final int MAX_INTENTOS = 3;
            
            while (proximo != null && !proximo.vehiculoId().equals(vehiculoId) && intentos < MAX_INTENTOS) {
                // No es su turno seg√∫n la cola local, liberar y reintentar
                cruce.release();
                logger.info("‚è∏Ô∏è veh√≠culo " + vehiculoId + " cede el paso a " + proximo.vehiculoId() + " en intersecci√≥n " + id);
                Thread.sleep(50);
                
                // Intentar adquirir nuevamente con timeout
                acquired = cruce.tryAcquire(500, TimeUnit.MILLISECONDS);
                if (!acquired) {
                    logger.warning("‚ö†Ô∏è No se pudo readquirir sem√°foro para " + vehiculoId);
                    colaEspera.remove(vehiculoWaiting);
                    return; // No bloquear indefinidamente
                }
                
                proximo = colaEspera.peek();
                intentos++;
            }
            
            // Si despu√©s de los intentos sigue sin ser su turno, puede ser un problema de sincronizaci√≥n
            // En ese caso, permitimos que proceda para evitar deadlocks
            if (intentos >= MAX_INTENTOS) {
                logger.warning("‚ö†Ô∏è Posible problema de sincronizaci√≥n para " + vehiculoId + " en intersecci√≥n " + id);
            }
            
            // Remover de la cola de espera
            colaEspera.remove(vehiculoWaiting);

            logger.info("‚úÖ veh√≠culo " + vehiculoId + " obtuvo permiso para cruzar intersecci√≥n " + id);
            
            vehiculosProcessed.incrementAndGet();
            
        } catch (Exception e) {
            logger.warning("Error en solicitud de cruce para " + vehiculoId + ": " + e.getMessage());
            // Asegurar que se remueve de la cola en caso de error
            colaEspera.remove(vehiculoWaiting);
            // Asegurar que se libera el sem√°foro si lo ten√≠a
            if (cruce.availablePermits() == 0) {
                try {
                    cruce.release();
                } catch (Exception ex) {
                    // Ignorar errores al liberar
                }
            }
            throw e;
        }
        // NO liberar el sem√°foro aqu√≠ - se liberar√° cuando el veh√≠culo termine el cruce
    }
    
    /**
     * Libera el permiso de cruce cuando el veh√≠culo termina de cruzar.
     * 
     * @param vehiculoId ID del veh√≠culo que termina de cruzar
     */
    public void liberarCruce(String vehiculoId) {
        try {
            // Verificar si el sem√°foro ya est√° liberado
            if (cruce.availablePermits() == 0) {
                cruce.release();
                logger.info("üîì Sem√°foro liberado en intersecci√≥n " + id + " por veh√≠culo " + vehiculoId);
            } else {
                logger.info("‚ÑπÔ∏è Sem√°foro ya estaba liberado en intersecci√≥n " + id);
            }
            
            logger.info("üèÅ veh√≠culo " + vehiculoId + " liber√≥ intersecci√≥n " + id + 
                       " (total procesados: " + vehiculosProcessed.get() + ")");
                       
            // Verificar si hay m√°s veh√≠culos esperando
            VehiculoWaiting siguiente = colaEspera.peek();
            if (siguiente != null) {
                logger.info("üì¢ Siguiente veh√≠culo en cola local: " + siguiente.vehiculoId() + 
                           " (lleg√≥ en t=" + siguiente.timestampLlegada() + ")");
            }
        } catch (Exception e) {
            logger.warning("Error al liberar cruce para " + vehiculoId + ": " + e.getMessage());
        }
    }
    
    /**
     * Verifica si la intersecci√≥n est√° disponible para cruzar.
     */
    public boolean estaDisponible() {
        return cruce.availablePermits() > 0;
    }
    
    /**
     * Obtiene el n√∫mero de veh√≠culos esperando en la cola.
     */
    public int getVehiculosEnEspera() {
        return colaEspera.size();
    }
    
    /**
     * Obtiene el total de veh√≠culos que han cruzado esta intersecci√≥n.
     */
    public int getVehiculosProcessed() {
        return vehiculosProcessed.get();
    }
    
    /**
     * Obtiene informaci√≥n de estado de la intersecci√≥n.
     */
    public EstadoInterseccion getEstado() {
        return new EstadoInterseccion(
            id,
            estaDisponible(),
            getVehiculosEnEspera(),
            getVehiculosProcessed()
        );
    }
    
    public String getId() {
        return id;
    }

    /*
    public boolean esPrimerEnFila(String vehiculoId) {
        return vehiculosEnEspera.peek() != null && vehiculosEnEspera.peek().equals(vehiculoId);
    }
    */

    /**
     * Record para representar un veh√≠culo esperando en la cola.
     */
    private record VehiculoWaiting(
        String vehiculoId,
        TipoVehiculo tipo,
        long timestampLlegada
    ) {}
    
    /**
     * Record para representar el estado de una intersecci√≥n.
     */
    public record EstadoInterseccion(
        String id,
        boolean disponible,
        int vehiculosEnEspera,
        int vehiculosProcessed
    ) {}

    /*
    public void removerVehiculoEnEspera(String vehiculoId) {
        vehiculosEnEspera.remove(vehiculoId);
    }
    */

    /**
     * Notifica a todos los veh√≠culos esperando que deben verificar su estado
     * ya que podr√≠a haber cambiado su orden o disponibilidad para cruzar.
     * SIEMPRE notifica, incluso cuando el cruce ya est√° libre.
     */
    public void notificarVehiculosEsperando() {
        logger.info("üì¢ Notificando veh√≠culos en espera en intersecci√≥n " + id);
        
        try {
            // Si el sem√°foro ya est√° disponible, adquirirlo primero para luego liberarlo
            boolean adquirido = false;
            
            if (cruce.availablePermits() > 0) {
                try {
                    // Adquirir el permiso brevemente
                    cruce.acquire();
                    adquirido = true;
                    logger.info("üîí Intersecci√≥n " + id + " bloqueada temporalmente para notificaci√≥n");
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
            
            // Siempre liberar una vez (ya sea porque ya estaba bloqueado o porque lo acabamos de adquirir)
            cruce.release();
            logger.info("üîî Sem√°foro liberado en intersecci√≥n " + id + " - veh√≠culos notificados");
            
            // Esperar un breve momento para permitir que los threads despierten
            Thread.sleep(50);
            
            // Si hab√≠amos adquirido el permiso, volver a adquirirlo para mantener el estado anterior
            if (adquirido) {
                try {
                    cruce.acquire();
                    logger.info("üîê Intersecci√≥n " + id + " restaurada a su estado original");
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        } catch (Exception e) {
            logger.warning("Error en notificaci√≥n de veh√≠culos: " + e.getMessage());
        }
    }

} 